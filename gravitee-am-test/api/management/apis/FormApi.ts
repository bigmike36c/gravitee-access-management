/* tslint:disable */
/* eslint-disable */
/**
 * Gravitee.io - Access Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Form,
    FormFromJSON,
    FormToJSON,
    NewForm,
    NewFormFromJSON,
    NewFormToJSON,
    PreviewRequest,
    PreviewRequestFromJSON,
    PreviewRequestToJSON,
    PreviewResponse,
    PreviewResponseFromJSON,
    PreviewResponseToJSON,
    UpdateForm,
    UpdateFormFromJSON,
    UpdateFormToJSON,
} from '../models';

export interface Create1Request {
    organizationId: string;
    environmentId: string;
    domain: string;
    application: string;
    email: NewForm;
}

export interface Create16Request {
    organizationId: string;
    form: NewForm;
}

export interface Create3Request {
    organizationId: string;
    environmentId: string;
    domain: string;
    form: NewForm;
}

export interface Delete1Request {
    organizationId: string;
    environmentId: string;
    domain: string;
    application: string;
    form: string;
}

export interface Delete19Request {
    organizationId: string;
    form: string;
}

export interface Delete3Request {
    organizationId: string;
    environmentId: string;
    domain: string;
    form: string;
}

export interface Get29Request {
    organizationId: string;
    template: Get29TemplateEnum;
}

export interface Get6Request {
    organizationId: string;
    environmentId: string;
    domain: string;
    application: string;
    template: Get6TemplateEnum;
}

export interface Get8Request {
    organizationId: string;
    environmentId: string;
    domain: string;
    template: Get8TemplateEnum;
}

export interface RenderDomainTemplateRequest {
    organizationId: string;
    environmentId: string;
    domain: string;
    body?: PreviewRequest;
}

export interface Update18Request {
    organizationId: string;
    form: string;
    form2: UpdateForm;
}

export interface Update3Request {
    organizationId: string;
    environmentId: string;
    domain: string;
    application: string;
    form: string;
    form2: UpdateForm;
}

export interface Update5Request {
    organizationId: string;
    environmentId: string;
    domain: string;
    form: string;
    form2: UpdateForm;
}

/**
 * 
 */
export class FormApi extends runtime.BaseAPI {

    /**
     * User must have APPLICATION_FORM[CREATE] permission on the specified application or APPLICATION_FORM[CREATE] permission on the specified domain or APPLICATION_FORM[CREATE] permission on the specified environment or APPLICATION_FORM[CREATE] permission on the specified organization
     * Create a form for an application
     */
    async create1Raw(requestParameters: Create1Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
            throw new runtime.RequiredError('organizationId','Required parameter requestParameters.organizationId was null or undefined when calling create1.');
        }

        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling create1.');
        }

        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling create1.');
        }

        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling create1.');
        }

        if (requestParameters.email === null || requestParameters.email === undefined) {
            throw new runtime.RequiredError('email','Required parameter requestParameters.email was null or undefined when calling create1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // gravitee-auth authentication
        }

        const response = await this.request({
            path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/applications/{application}/forms`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters.organizationId))).replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))).replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))).replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewFormToJSON(requestParameters.email),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have APPLICATION_FORM[CREATE] permission on the specified application or APPLICATION_FORM[CREATE] permission on the specified domain or APPLICATION_FORM[CREATE] permission on the specified environment or APPLICATION_FORM[CREATE] permission on the specified organization
     * Create a form for an application
     */
    async create1(requestParameters: Create1Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.create1Raw(requestParameters, initOverrides);
    }

    /**
     * User must have the ORGANIZATION_FORM[CREATE] permission on the specified organization
     * Create a form
     */
    async create16Raw(requestParameters: Create16Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
            throw new runtime.RequiredError('organizationId','Required parameter requestParameters.organizationId was null or undefined when calling create16.');
        }

        if (requestParameters.form === null || requestParameters.form === undefined) {
            throw new runtime.RequiredError('form','Required parameter requestParameters.form was null or undefined when calling create16.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // gravitee-auth authentication
        }

        const response = await this.request({
            path: `/organizations/{organizationId}/forms`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters.organizationId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewFormToJSON(requestParameters.form),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the ORGANIZATION_FORM[CREATE] permission on the specified organization
     * Create a form
     */
    async create16(requestParameters: Create16Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.create16Raw(requestParameters, initOverrides);
    }

    /**
     * User must have the DOMAIN_FORM[CREATE] permission on the specified domain or DOMAIN_FORM[CREATE] permission on the specified environment or DOMAIN_FORM[CREATE] permission on the specified organization
     * Create a form
     */
    async create3Raw(requestParameters: Create3Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
            throw new runtime.RequiredError('organizationId','Required parameter requestParameters.organizationId was null or undefined when calling create3.');
        }

        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling create3.');
        }

        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling create3.');
        }

        if (requestParameters.form === null || requestParameters.form === undefined) {
            throw new runtime.RequiredError('form','Required parameter requestParameters.form was null or undefined when calling create3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // gravitee-auth authentication
        }

        const response = await this.request({
            path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/forms`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters.organizationId))).replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))).replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NewFormToJSON(requestParameters.form),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the DOMAIN_FORM[CREATE] permission on the specified domain or DOMAIN_FORM[CREATE] permission on the specified environment or DOMAIN_FORM[CREATE] permission on the specified organization
     * Create a form
     */
    async create3(requestParameters: Create3Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.create3Raw(requestParameters, initOverrides);
    }

    /**
     * User must have APPLICATION_FORM[DELETE] permission on the specified application or APPLICATION_FORM[DELETE] permission on the specified domain or APPLICATION_FORM[DELETE] permission on the specified environment or APPLICATION_FORM[DELETE] permission on the specified organization
     * Delete a form for an application
     */
    async delete1Raw(requestParameters: Delete1Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
            throw new runtime.RequiredError('organizationId','Required parameter requestParameters.organizationId was null or undefined when calling delete1.');
        }

        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling delete1.');
        }

        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling delete1.');
        }

        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling delete1.');
        }

        if (requestParameters.form === null || requestParameters.form === undefined) {
            throw new runtime.RequiredError('form','Required parameter requestParameters.form was null or undefined when calling delete1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // gravitee-auth authentication
        }

        const response = await this.request({
            path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/applications/{application}/forms/{form}`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters.organizationId))).replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))).replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))).replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"form"}}`, encodeURIComponent(String(requestParameters.form))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have APPLICATION_FORM[DELETE] permission on the specified application or APPLICATION_FORM[DELETE] permission on the specified domain or APPLICATION_FORM[DELETE] permission on the specified environment or APPLICATION_FORM[DELETE] permission on the specified organization
     * Delete a form for an application
     */
    async delete1(requestParameters: Delete1Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.delete1Raw(requestParameters, initOverrides);
    }

    /**
     * User must have the ORGANIZATION_FORM[DELETE] permission on the specified organization
     * Delete a form
     */
    async delete19Raw(requestParameters: Delete19Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
            throw new runtime.RequiredError('organizationId','Required parameter requestParameters.organizationId was null or undefined when calling delete19.');
        }

        if (requestParameters.form === null || requestParameters.form === undefined) {
            throw new runtime.RequiredError('form','Required parameter requestParameters.form was null or undefined when calling delete19.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // gravitee-auth authentication
        }

        const response = await this.request({
            path: `/organizations/{organizationId}/forms/{form}`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters.organizationId))).replace(`{${"form"}}`, encodeURIComponent(String(requestParameters.form))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the ORGANIZATION_FORM[DELETE] permission on the specified organization
     * Delete a form
     */
    async delete19(requestParameters: Delete19Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.delete19Raw(requestParameters, initOverrides);
    }

    /**
     * User must have the DOMAIN_FORM[DELETE] permission on the specified domain or DOMAIN_FORM[DELETE] permission on the specified environment or DOMAIN_FORM[DELETE] permission on the specified organization
     * Delete a form
     */
    async delete3Raw(requestParameters: Delete3Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
            throw new runtime.RequiredError('organizationId','Required parameter requestParameters.organizationId was null or undefined when calling delete3.');
        }

        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling delete3.');
        }

        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling delete3.');
        }

        if (requestParameters.form === null || requestParameters.form === undefined) {
            throw new runtime.RequiredError('form','Required parameter requestParameters.form was null or undefined when calling delete3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // gravitee-auth authentication
        }

        const response = await this.request({
            path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/forms/{form}`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters.organizationId))).replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))).replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))).replace(`{${"form"}}`, encodeURIComponent(String(requestParameters.form))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the DOMAIN_FORM[DELETE] permission on the specified domain or DOMAIN_FORM[DELETE] permission on the specified environment or DOMAIN_FORM[DELETE] permission on the specified organization
     * Delete a form
     */
    async delete3(requestParameters: Delete3Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.delete3Raw(requestParameters, initOverrides);
    }

    /**
     * User must have the ORGANIZATION_FORM[READ] permission on the specified organization
     * Find an organization form template
     */
    async get29Raw(requestParameters: Get29Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
            throw new runtime.RequiredError('organizationId','Required parameter requestParameters.organizationId was null or undefined when calling get29.');
        }

        if (requestParameters.template === null || requestParameters.template === undefined) {
            throw new runtime.RequiredError('template','Required parameter requestParameters.template was null or undefined when calling get29.');
        }

        const queryParameters: any = {};

        if (requestParameters.template !== undefined) {
            queryParameters['template'] = requestParameters.template;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // gravitee-auth authentication
        }

        const response = await this.request({
            path: `/organizations/{organizationId}/forms`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters.organizationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the ORGANIZATION_FORM[READ] permission on the specified organization
     * Find an organization form template
     */
    async get29(requestParameters: Get29Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.get29Raw(requestParameters, initOverrides);
    }

    /**
     * User must have APPLICATION_FORM[READ] permission on the specified application or APPLICATION_FORM[READ] permission on the specified domain or APPLICATION_FORM[READ] permission on the specified environment or APPLICATION_FORM[READ] permission on the specified organization
     * Find a form for an application
     */
    async get6Raw(requestParameters: Get6Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
            throw new runtime.RequiredError('organizationId','Required parameter requestParameters.organizationId was null or undefined when calling get6.');
        }

        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling get6.');
        }

        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling get6.');
        }

        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling get6.');
        }

        if (requestParameters.template === null || requestParameters.template === undefined) {
            throw new runtime.RequiredError('template','Required parameter requestParameters.template was null or undefined when calling get6.');
        }

        const queryParameters: any = {};

        if (requestParameters.template !== undefined) {
            queryParameters['template'] = requestParameters.template;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // gravitee-auth authentication
        }

        const response = await this.request({
            path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/applications/{application}/forms`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters.organizationId))).replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))).replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))).replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have APPLICATION_FORM[READ] permission on the specified application or APPLICATION_FORM[READ] permission on the specified domain or APPLICATION_FORM[READ] permission on the specified environment or APPLICATION_FORM[READ] permission on the specified organization
     * Find a form for an application
     */
    async get6(requestParameters: Get6Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.get6Raw(requestParameters, initOverrides);
    }

    /**
     * User must have the DOMAIN_FORM[READ] permission on the specified domain or DOMAIN_FORM[READ] permission on the specified environment or DOMAIN_FORM[READ] permission on the specified organization
     * Find a form
     */
    async get8Raw(requestParameters: Get8Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
            throw new runtime.RequiredError('organizationId','Required parameter requestParameters.organizationId was null or undefined when calling get8.');
        }

        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling get8.');
        }

        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling get8.');
        }

        if (requestParameters.template === null || requestParameters.template === undefined) {
            throw new runtime.RequiredError('template','Required parameter requestParameters.template was null or undefined when calling get8.');
        }

        const queryParameters: any = {};

        if (requestParameters.template !== undefined) {
            queryParameters['template'] = requestParameters.template;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // gravitee-auth authentication
        }

        const response = await this.request({
            path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/forms`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters.organizationId))).replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))).replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * User must have the DOMAIN_FORM[READ] permission on the specified domain or DOMAIN_FORM[READ] permission on the specified environment or DOMAIN_FORM[READ] permission on the specified organization
     * Find a form
     */
    async get8(requestParameters: Get8Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<void> {
        await this.get8Raw(requestParameters, initOverrides);
    }

    /**
     * User must have the DOMAIN_THEME[READ] permission on the specified domain or DOMAIN_THEME[READ] permission on the specified environment or DOMAIN_THEME[READ] permission on the specified organization
     * Render the provided template
     */
    async renderDomainTemplateRaw(requestParameters: RenderDomainTemplateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<PreviewResponse>> {
        if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
            throw new runtime.RequiredError('organizationId','Required parameter requestParameters.organizationId was null or undefined when calling renderDomainTemplate.');
        }

        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling renderDomainTemplate.');
        }

        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling renderDomainTemplate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // gravitee-auth authentication
        }

        const response = await this.request({
            path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/forms/preview`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters.organizationId))).replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))).replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PreviewRequestToJSON(requestParameters.body),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PreviewResponseFromJSON(jsonValue));
    }

    /**
     * User must have the DOMAIN_THEME[READ] permission on the specified domain or DOMAIN_THEME[READ] permission on the specified environment or DOMAIN_THEME[READ] permission on the specified organization
     * Render the provided template
     */
    async renderDomainTemplate(requestParameters: RenderDomainTemplateRequest, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<PreviewResponse> {
        const response = await this.renderDomainTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the ORGANIZATION_FORM[UPDATE] permission on the specified organization
     * Update a form
     */
    async update18Raw(requestParameters: Update18Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Form>> {
        if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
            throw new runtime.RequiredError('organizationId','Required parameter requestParameters.organizationId was null or undefined when calling update18.');
        }

        if (requestParameters.form === null || requestParameters.form === undefined) {
            throw new runtime.RequiredError('form','Required parameter requestParameters.form was null or undefined when calling update18.');
        }

        if (requestParameters.form2 === null || requestParameters.form2 === undefined) {
            throw new runtime.RequiredError('form2','Required parameter requestParameters.form2 was null or undefined when calling update18.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // gravitee-auth authentication
        }

        const response = await this.request({
            path: `/organizations/{organizationId}/forms/{form}`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters.organizationId))).replace(`{${"form"}}`, encodeURIComponent(String(requestParameters.form))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateFormToJSON(requestParameters.form2),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormFromJSON(jsonValue));
    }

    /**
     * User must have the ORGANIZATION_FORM[UPDATE] permission on the specified organization
     * Update a form
     */
    async update18(requestParameters: Update18Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Form> {
        const response = await this.update18Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have APPLICATION_FORM[UPDATE] permission on the specified application or APPLICATION_FORM[UPDATE] permission on the specified domain or APPLICATION_FORM[UPDATE] permission on the specified environment or APPLICATION_FORM[UPDATE] permission on the specified organization
     * Update a form for an application
     */
    async update3Raw(requestParameters: Update3Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Form>> {
        if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
            throw new runtime.RequiredError('organizationId','Required parameter requestParameters.organizationId was null or undefined when calling update3.');
        }

        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling update3.');
        }

        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling update3.');
        }

        if (requestParameters.application === null || requestParameters.application === undefined) {
            throw new runtime.RequiredError('application','Required parameter requestParameters.application was null or undefined when calling update3.');
        }

        if (requestParameters.form === null || requestParameters.form === undefined) {
            throw new runtime.RequiredError('form','Required parameter requestParameters.form was null or undefined when calling update3.');
        }

        if (requestParameters.form2 === null || requestParameters.form2 === undefined) {
            throw new runtime.RequiredError('form2','Required parameter requestParameters.form2 was null or undefined when calling update3.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // gravitee-auth authentication
        }

        const response = await this.request({
            path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/applications/{application}/forms/{form}`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters.organizationId))).replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))).replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))).replace(`{${"application"}}`, encodeURIComponent(String(requestParameters.application))).replace(`{${"form"}}`, encodeURIComponent(String(requestParameters.form))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateFormToJSON(requestParameters.form2),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormFromJSON(jsonValue));
    }

    /**
     * User must have APPLICATION_FORM[UPDATE] permission on the specified application or APPLICATION_FORM[UPDATE] permission on the specified domain or APPLICATION_FORM[UPDATE] permission on the specified environment or APPLICATION_FORM[UPDATE] permission on the specified organization
     * Update a form for an application
     */
    async update3(requestParameters: Update3Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Form> {
        const response = await this.update3Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * User must have the DOMAIN_FORM[UPDATE] permission on the specified domain or DOMAIN_FORM[UPDATE] permission on the specified environment or DOMAIN_FORM[UPDATE] permission on the specified organization
     * Update a form
     */
    async update5Raw(requestParameters: Update5Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<runtime.ApiResponse<Form>> {
        if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
            throw new runtime.RequiredError('organizationId','Required parameter requestParameters.organizationId was null or undefined when calling update5.');
        }

        if (requestParameters.environmentId === null || requestParameters.environmentId === undefined) {
            throw new runtime.RequiredError('environmentId','Required parameter requestParameters.environmentId was null or undefined when calling update5.');
        }

        if (requestParameters.domain === null || requestParameters.domain === undefined) {
            throw new runtime.RequiredError('domain','Required parameter requestParameters.domain was null or undefined when calling update5.');
        }

        if (requestParameters.form === null || requestParameters.form === undefined) {
            throw new runtime.RequiredError('form','Required parameter requestParameters.form was null or undefined when calling update5.');
        }

        if (requestParameters.form2 === null || requestParameters.form2 === undefined) {
            throw new runtime.RequiredError('form2','Required parameter requestParameters.form2 was null or undefined when calling update5.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // gravitee-auth authentication
        }

        const response = await this.request({
            path: `/organizations/{organizationId}/environments/{environmentId}/domains/{domain}/forms/{form}`.replace(`{${"organizationId"}}`, encodeURIComponent(String(requestParameters.organizationId))).replace(`{${"environmentId"}}`, encodeURIComponent(String(requestParameters.environmentId))).replace(`{${"domain"}}`, encodeURIComponent(String(requestParameters.domain))).replace(`{${"form"}}`, encodeURIComponent(String(requestParameters.form))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateFormToJSON(requestParameters.form2),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FormFromJSON(jsonValue));
    }

    /**
     * User must have the DOMAIN_FORM[UPDATE] permission on the specified domain or DOMAIN_FORM[UPDATE] permission on the specified environment or DOMAIN_FORM[UPDATE] permission on the specified organization
     * Update a form
     */
    async update5(requestParameters: Update5Request, initOverrides?: RequestInit | runtime.InitOverideFunction): Promise<Form> {
        const response = await this.update5Raw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const Get29TemplateEnum = {
    Login: 'LOGIN',
    Registration: 'REGISTRATION',
    RegistrationConfirmation: 'REGISTRATION_CONFIRMATION',
    ForgotPassword: 'FORGOT_PASSWORD',
    ResetPassword: 'RESET_PASSWORD',
    Oauth2UserConsent: 'OAUTH2_USER_CONSENT',
    MfaEnroll: 'MFA_ENROLL',
    MfaChallenge: 'MFA_CHALLENGE',
    MfaChallengeAlternatives: 'MFA_CHALLENGE_ALTERNATIVES',
    MfaRecoveryCode: 'MFA_RECOVERY_CODE',
    BlockedAccount: 'BLOCKED_ACCOUNT',
    CompleteProfile: 'COMPLETE_PROFILE',
    WebauthnRegister: 'WEBAUTHN_REGISTER',
    WebauthnLogin: 'WEBAUTHN_LOGIN',
    IdentifierFirstLogin: 'IDENTIFIER_FIRST_LOGIN',
    Error: 'ERROR',
    CertificateExpiration: 'CERTIFICATE_EXPIRATION'
} as const;
export type Get29TemplateEnum = typeof Get29TemplateEnum[keyof typeof Get29TemplateEnum];
/**
 * @export
 */
export const Get6TemplateEnum = {
    Login: 'LOGIN',
    Registration: 'REGISTRATION',
    RegistrationConfirmation: 'REGISTRATION_CONFIRMATION',
    ForgotPassword: 'FORGOT_PASSWORD',
    ResetPassword: 'RESET_PASSWORD',
    Oauth2UserConsent: 'OAUTH2_USER_CONSENT',
    MfaEnroll: 'MFA_ENROLL',
    MfaChallenge: 'MFA_CHALLENGE',
    MfaChallengeAlternatives: 'MFA_CHALLENGE_ALTERNATIVES',
    MfaRecoveryCode: 'MFA_RECOVERY_CODE',
    BlockedAccount: 'BLOCKED_ACCOUNT',
    CompleteProfile: 'COMPLETE_PROFILE',
    WebauthnRegister: 'WEBAUTHN_REGISTER',
    WebauthnLogin: 'WEBAUTHN_LOGIN',
    IdentifierFirstLogin: 'IDENTIFIER_FIRST_LOGIN',
    Error: 'ERROR',
    CertificateExpiration: 'CERTIFICATE_EXPIRATION'
} as const;
export type Get6TemplateEnum = typeof Get6TemplateEnum[keyof typeof Get6TemplateEnum];
/**
 * @export
 */
export const Get8TemplateEnum = {
    Login: 'LOGIN',
    Registration: 'REGISTRATION',
    RegistrationConfirmation: 'REGISTRATION_CONFIRMATION',
    ForgotPassword: 'FORGOT_PASSWORD',
    ResetPassword: 'RESET_PASSWORD',
    Oauth2UserConsent: 'OAUTH2_USER_CONSENT',
    MfaEnroll: 'MFA_ENROLL',
    MfaChallenge: 'MFA_CHALLENGE',
    MfaChallengeAlternatives: 'MFA_CHALLENGE_ALTERNATIVES',
    MfaRecoveryCode: 'MFA_RECOVERY_CODE',
    BlockedAccount: 'BLOCKED_ACCOUNT',
    CompleteProfile: 'COMPLETE_PROFILE',
    WebauthnRegister: 'WEBAUTHN_REGISTER',
    WebauthnLogin: 'WEBAUTHN_LOGIN',
    IdentifierFirstLogin: 'IDENTIFIER_FIRST_LOGIN',
    Error: 'ERROR',
    CertificateExpiration: 'CERTIFICATE_EXPIRATION'
} as const;
export type Get8TemplateEnum = typeof Get8TemplateEnum[keyof typeof Get8TemplateEnum];
